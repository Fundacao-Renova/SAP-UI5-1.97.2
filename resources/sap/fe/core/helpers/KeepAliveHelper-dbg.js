/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/KeepAliveRefreshTypes"], function (Log, ModelHelper, KeepAliveRefreshTypes) {
  "use strict";

  var PATH_TO_STORE = KeepAliveRefreshTypes.PATH_TO_STORE;
  var RefreshStrategyType = KeepAliveRefreshTypes.RefreshStrategyType;
  var getEntitySetPath = ModelHelper.getEntitySetPath;

  // Private functions - start
  var _fnSimplifyEntitySetPath = function (metaModel, entitySetPathToUse) {
    var entitySetPath = getEntitySetPath(entitySetPathToUse);
    var entitySet = entitySetPath.indexOf("$NavigationPropertyBinding") > -1 && metaModel.getObject(entitySetPath);
    return entitySet ? "/" + entitySet : entitySetPathToUse;
  };

  var _fnIsApplicable = function (primaryPath, key, strategy) {
    return primaryPath === key || strategy === RefreshStrategyType.IncludingDependents && primaryPath.startsWith(key);
  };
  /**
   * Check if given path resides in the context path provided.
   *
   * @param {ODataMetaModel} metaModel MetaModel to be used
   * @param {string} contextPath Context path to be used
   * @param {string} path Path to be used
   * @param {RefreshStrategyType} strategy Strategy, it could be 'self' | 'includingDependents'
   * @returns {boolean} Returns true if the context path is applicable.
   */


  var _isPathApplicableToContextPath = function (metaModel, contextPath, path, strategy) {
    var contextPathToCheck = contextPath.startsWith("/") ? contextPath : "/" + contextPath,
        pathToCheck = path.startsWith("/") ? path : "/" + path;

    if (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {
      contextPathToCheck = _fnSimplifyEntitySetPath(metaModel, contextPathToCheck);

      if (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {
        pathToCheck = _fnSimplifyEntitySetPath(metaModel, pathToCheck);
      } else {
        return true;
      }
    }

    return _fnIsApplicable(contextPathToCheck, pathToCheck, strategy);
  }; // Private functions - end

  /**
   * Get controls to refresh in a view.
   *
   * @param {View} view View of the controls
   * @param {Control[]} controls Context path to be used
   * @returns {Control[]} Returns controls that need to be refreshed.
   */


  var getControlsForRefresh = function (view, controls) {
    var controlsForRefresh = [];
    var metaModel = view.getModel().getMetaModel();
    var internalModel = view.getModel("internal");
    var refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};

    if (controls) {
      controls.forEach(function (control) {
        var contextPath = control.data("targetCollectionPath");

        for (var key in refreshStrategy) {
          var strategy = refreshStrategy[key];

          if (controlsForRefresh.indexOf(control) === -1 && _isPathApplicableToContextPath(metaModel, contextPath, key, strategy)) {
            controlsForRefresh.push(control);
          }
        }
      });
    }

    return controlsForRefresh;
  };
  /**
   * Get refresh strategy for the control for a context path.
   *
   * @param {Control} control Control from which refresh info is needed
   * @param {string} contextPath ContextPath for properities
   * @returns {RefreshStrategyType} Returns strategy for control refresh.
   */


  var getControlRefreshStrategyForContextPath = function (control, contextPath) {
    var metaModel = control.getModel().getMetaModel();
    var internalModel = control.getModel("internal");
    var refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};
    var strategy;

    if (contextPath) {
      for (var key in refreshStrategy) {
        var strategyToCheck = refreshStrategy[key];

        if (_isPathApplicableToContextPath(metaModel, contextPath, key, strategyToCheck)) {
          strategy = strategyToCheck;

          if (strategy === "includingDependents") {
            break;
          }
        }
      }
    }

    return strategy;
  };
  /**
   * Get refresh info from view.
   *
   * @param {View} view View from which refresh info is needed
   * @returns {RefreshStrategyType | undefined} Returns strategy for view refresh.
   */


  var getViewRefreshInfo = function (view) {
    var viewData = view.getViewData(),
        contextPath = viewData && ((viewData === null || viewData === void 0 ? void 0 : viewData.contextPath) || "/" + (viewData === null || viewData === void 0 ? void 0 : viewData.entitySet));
    return KeepAliveHelper.getControlRefreshStrategyForContextPath(view, contextPath);
  };
  /**
   * Get refresh strategy for an intent.
   *
   * @param {RefreshStrategies} refreshStrategies RefreshStrategies to consider
   * @param {string} semanticObject Outbound Semantic Object
   * @param {string} action Outbound Action
   * @returns {SORefreshStrategy | undefined} Returns refresh strategies to use for the intent.
   */


  var getRefreshStrategyForIntent = function (refreshStrategies, semanticObject, action) {
    var soAction = semanticObject && action && semanticObject + "-" + action;
    var intents = refreshStrategies.intents;
    var soActionIntentMatch = intents && soAction && intents[soAction];
    var soIntentMatch = !soActionIntentMatch && intents && semanticObject && intents[semanticObject];
    return soActionIntentMatch || soIntentMatch || (refreshStrategies === null || refreshStrategies === void 0 ? void 0 : refreshStrategies.defaultBehavior) || (refreshStrategies === null || refreshStrategies === void 0 ? void 0 : refreshStrategies._feDefault);
  };
  /**
   * Store control refresh strategy for hash in the internal model.
   *
   * @param {Control} control Control for the refresh strategy
   * @param {SOAction} hash Shell hash object
   */


  var storeControlRefreshStrategyForHash = function (control, hash) {
    if (control && control.getModel("viewData") && control.getModel("internal")) {
      var viewData = control.getModel("viewData");
      var refreshStrategies = viewData.getProperty(PATH_TO_STORE);

      if (refreshStrategies) {
        var internalModel = control.getModel("internal");
        var refreshStrategy = KeepAliveHelper.getRefreshStrategyForIntent(refreshStrategies, hash === null || hash === void 0 ? void 0 : hash.semanticObject, hash === null || hash === void 0 ? void 0 : hash.action);
        internalModel.setProperty(PATH_TO_STORE, refreshStrategy);
      }
    }
  };
  /**
   * Method to refresh and restore the view if neccessary.
   *
   * @param {object} view Control for the refresh strategy
   * @returns {object} A promise after view refresh and restore are triggered
   */


  var restoreView = function (view) {
    var internalModelContext = view.getBindingContext("internal");
    var controller = view.getController();
    var viewState = controller === null || controller === void 0 ? void 0 : controller.viewState;
    var refreshBindings = Promise.resolve();

    if (internalModelContext.getProperty("restoreStatus") === "pending") {
      if (viewState.refreshViewBindings) {
        refreshBindings = viewState.refreshViewBindings();
        refreshBindings.then(function () {
          Log.info("FE V4: Refresh was triggered successfull: " + view.getId());
        }).catch(function (err) {
          Log.warning("FE V4: Refresh was unsuccessfull: " + view.getId(), err);
        });
      }

      refreshBindings = refreshBindings.then(function () {
        viewState.onRestore();
        internalModelContext.setProperty("restoreStatus", "done");
      }).catch(function (error) {
        Log.warning("FE V4: Restore was unsuccessfull: " + view.getId(), error);
      });
    }

    return refreshBindings;
  };
  /**
   * helper class for KeepAlive feature in sap.fe.
   */


  var KeepAliveHelper = {
    getControlsForRefresh: getControlsForRefresh,
    getControlRefreshStrategyForContextPath: getControlRefreshStrategyForContextPath,
    getViewRefreshInfo: getViewRefreshInfo,
    getRefreshStrategyForIntent: getRefreshStrategyForIntent,
    storeControlRefreshStrategyForHash: storeControlRefreshStrategyForHash,
    restoreView: restoreView
  };
  return KeepAliveHelper;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,